@model TaskCentralWebApp.ViewModels.ProjectDashboardViewModel
@using Microsoft.AspNetCore.Authentication
@using System.Security.Claims

@{
    var aspId = User.FindFirstValue(ClaimTypes.NameIdentifier);
    TaskCentralDBContext context = new TaskCentralDBContext();
    // Retrieve the corresponding user from your database context
    var userId = context.Users.FirstOrDefault(x => x.AspUserId == aspId).UserId;
}
<div class="container">
    <div class="row">
        <div class="col-md-12">
            <h1>@Model.Project.ProjectName - Dashboard</h1>
            <ul class="nav nav-pills">
                @if (userId == Model.Project.ManagerId)
                {
                    <li class="nav-item">
                        <a class="nav-link" asp-controller="ProjectMembers" asp-action="Index" asp-route-projectid="@Model.Project.ProjectId"><button type="button" class="btn btn-dark">Members</button></a>
                    </li>
                }
                <li class="nav-item">
                    <a class="nav-link" asp-controller="Tasks" asp-action="Index" asp-route-projectid="@Model.Project.ProjectId"><button type="button" class="btn btn-dark">Tasks</button></a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" asp-action="Index"><button type="button" class="btn btn-outline-primary">Back to Projects</button></a>
                </li> 
            </ul>
        </div>
    </div>
    <div class="row mt-3">
        <div class="col-md-6">
            <h2>Project Info</h2>
            <ul class="list-group">
                <li class="list-group-item">Total Tasks: @Model.TotalTasks</li>
                <li class="list-group-item">Completed Tasks: @Model.CompletedTasks</li>
                <li class="list-group-item">Pending Tasks: @Model.PendingTasks</li>
                <li class="list-group-item">Overdue Tasks: @Model.OverdueTasks</li>
            </ul>
        </div>
        <div class="col-md-6">
            <h2>Tasks Per Member:</h2>
            <ul class="list-group">
                @foreach (var member in Model.TasksPerMember)
                {
                    <li class="list-group-item">Member: @member.UserName, Task Count: @member.TaskCount</li>
                }
            </ul>
        </div>
    </div>
    <div class="row mt-3">
        <div class="col-md-6">
            <!-- Load the Google Charts library -->
            <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>

            <!-- Create a div to hold the chart -->
            <div id="piechart"></div>
        </div>
        <div class="col-md-6">
            <!-- Create a div to hold the bar chart -->
            <div id="barchart"></div>

            <script type="text/javascript">
                // Load the Visualization API and the corechart package.
                google.charts.load('current', { 'packages': ['corechart'] });

                // Set a callback to run when the Google Visualization API is loaded.
                google.charts.setOnLoadCallback(drawChart);
                google.charts.setOnLoadCallback(drawBarChart);

                // Callback that creates and populates a data table,
                // instantiates the pie chart, passes in the data and
                // draws it.
                function drawChart() {
                    // Create the data table.
                    var data = new google.visualization.DataTable();
                    data.addColumn('string', 'Status');
                    data.addColumn('number', 'Count');

                    // Get the task status data from your controller action
                    $.getJSON('@Url.Action("getProjectData", "Projects", new { id = Model.Project.ProjectId })', function (taskStatusData) {
                        // Add the task status data to the data table
                        taskStatusData.forEach(function (statusData) {
                            data.addRow([statusData.status, statusData.count]);
                        });

                        // Set chart options
                        var options = {
                            'title': 'Tasks Status',
                            'width': 400,
                            'height': 300
                        };

                        // Instantiate and draw our chart, passing in some options.
                        var chart = new google.visualization.PieChart(document.getElementById('piechart'));
                        chart.draw(data, options);
                    });
                }

                // Callback that creates and populates a data table,
                // instantiates the bar chart, passes in the data and
                // draws it.
                function drawBarChart() {
                    // Create the data table.
                    var data = new google.visualization.DataTable();
                    data.addColumn('string', 'User');
                    data.addColumn('number', 'Completed');
                    data.addColumn('number', 'Pending');

                    // Get the task status data from your controller action
                    $.getJSON('@Url.Action("getProjectUserData", "Projects", new { id = Model.Project.ProjectId })', function (taskStatusData) {
                        // Group the task status data by user
                        var groupedData = {};
                        taskStatusData.forEach(function (statusData) {
                            if (!groupedData[statusData.userId]) {
                                groupedData[statusData.userId] = { completed: 0, pending: 0 };
                            }
                            if (statusData.status === "Completed") {
                                groupedData[statusData.userId].completed = statusData.count;
                            } else if (statusData.status === "Pending") {
                                groupedData[statusData.userId].pending = statusData.count;
                            }
                        });

                        // Add the task status data to the data table
                        Object.keys(groupedData).forEach(function (userId) {
                            data.addRow([userId, groupedData[userId].completed, groupedData[userId].pending]);
                        });

                        // Set chart options
                        var options = {
                            'title': 'Tasks per User',
                            'width': 400,
                            'height': 300,
                            'hAxis': {
                                'format': '0' // Display integer values on the x-axis
                            }
                        };

                        // Instantiate and draw our chart, passing in some options.
                        var chart = new google.visualization.BarChart(document.getElementById('barchart'));
                        chart.draw(data, options);
                    });
                }
            </script>


        </div>
    </div>
</div>

